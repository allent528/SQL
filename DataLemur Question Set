/* An assortment of questions by DataLemur 
Source: https://datalemur.com/questions */

--skills used: window functions, CTEs, rolling averages, subqueries, CASE statements, aggregate functions


-- 1. User's Third Transaction
-- Assume you are given the table below on Uber transactions made by users. Write a query to obtain the third transaction of every user. 
-- Output the user id, spend and transaction date.

WITH table_table AS (
select user_id, spend, transaction_date,
row_number() OVER (partition by user_id order by transaction_date) as third
from transactions
)

select user_id, spend, transaction_date
from table_table
where third = 3
;

-- 2.Your team at Accenture is helping a Fortune 500 client revamp their compensation and benefits program. 
/* The first step in this analysis is to manually review employees who are potentially overpaid or underpaid.

An employee is considered to be potentially overpaid if they earn more than 2 times the average salary for people with the same title. 
Similarly, an employee might be underpaid if they earn less than half of the average for their title. 
We'll refer to employees who are both underpaid and overpaid as compensation outliers for the purposes of this problem.

Write a query that shows the following data for each compensation outlier: 
employee ID, salary, and whether they are potentially overpaid or potentially underpaid (refer to Example Output below). */

with payout as (
SELECT
  employee_id,
  salary,
  title,
  (AVG(salary) OVER (PARTITION BY title)) * 2 AS double_average,
  (AVG(salary) OVER (PARTITION BY title)) / 2 AS half_average
FROM employee_pay
)
SELECT
  employee_id,
  salary,
  CASE WHEN salary > double_average THEN 'Overpaid'
    WHEN salary < half_average THEN 'Underpaid'
  END AS outlier_status
FROM payout
WHERE salary > double_average
  OR salary < half_average;

/* 3. Assume you are given the tables below containing information on Snapchat users, their ages, and their time spent sending and opening snaps. 
Write a query to obtain a breakdown of the time spent sending vs. opening snaps (as a percentage of total time spent on these activities) for each age group.

Output the age bucket and percentage of sending and opening snaps. Round the percentage to 2 decimal places. */

select age_bucket,
round(send_time*100.0/total,2) as time_send_perc,
round(open_time*100.0/total,2) as time_open_perc
from (
select age_bucket,
sum(CASE WHEN activity_type = 'open' THEN time_spent ELSE 0 END) as open_time,
sum(CASE when activity_type = 'send' THEN time_spent ELSE 0 END) as send_time,
sum(time_spent) as total
from (
select *
from activities a  
join age_breakdown ab on ab.user_id = a.user_id
where activity_type in ('open', 'send')
) one
group by age_bucket
) two
;

/* 4. The table below contains information about tweets over a given period of time. 
Calculate the 3-day rolling average of tweets published by each user for each date that a tweet was posted. 
Output the user id, tweet date, and rolling averages rounded to 2 decimal places. */

select user_id, tweet_date, ROUND(rollingavg,2) as rollingavg3days
from (
SELECT user_id,
tweet_date,
avg(count(distinct tweet_id)) over (partition by user_id order by tweet_date
rows BETWEEN 2 preceding and current row) as rollingavg
FROM tweets
GROUP BY user_id, tweet_date
) one
;

/* 5. Assume you are given the table below containing measurement values obtained from a sensor over several days. Measurements are taken several times within a given day.
Write a query to obtain the sum of the odd-numbered and even-numbered measurements on a particular day, in two different columns.
Note that the 1st, 3rd, 5th measurements within a day are considered odd-numbered measurements and the 2nd, 4th, 6th measurements are even-numbered measurements. */

select day,
sum(CASE when num % 2 = 1 THEN measurement_value ELSE 0 END) as odd_sum,
sum(CASE when num %2 = 0 THEN measurement_value ELSE 0 END) as even_sum
from (
  select day, measurement_value,
  row_number() over (PARTITION BY day order by day) as num
  from (
    select *, cast(measurement_time as date) as day
    from measurements
    order by measurement_time
  ) one
) two
group by two.day
;

/* 6. Assume you are given the table below containing information on Amazon customers and their spend on products belonging to various categories. 
Identify the top two highest-grossing products within each category in 2022. Output the category, product, and total spend. */

select category, product, total_spend
from (
  select category, product, total_spend,
  Row_number() over (PARTITION BY category order by total_spend desc) as rownumber
  from (
    select category, product, 
    sum(spend) as total_spend
    from (
      SELECT *, cast(transaction_date as date) as datenohour
      FROM product_spend
    ) one
    where extract(year from datenohour) = 2022
    GROUP BY category, product
  ) two
) three
where rownumber < 3
;

/* 7. Assume you are given the table below on user transactions. 
Write a query to obtain the list of customers whose first transaction was valued at $50 or more. Output the number of users. */

SELECT count(*) as users
from (
  SELECT user_id, spend
  from (
    SELECT user_id, spend, transaction_date,
    row_number() over (PARTITION BY user_id order by transaction_date)as rownumber
    FROM user_transactions
  ) one
where rownumber = 1 and spend >= 50.00
) two
;

/* 8.The LinkedIn Creator team is looking for power creators who use their personal profile as a company or influencer page. 
This means that if someone's Linkedin page has more followers than all the company they work for, we can safely assume that person is a Power Creator. 
Keep in mind that if a person works at multiple companies, we should take into account the company with the most followers.

Write a query to return the IDs of these LinkedIn power creators in ascending order. */

with losers as (
SELECT pp.profile_id as profile_id, pp.name as names, pp.followers, cp.name as namec, cp.followers 
FROM personal_profiles pp
left join employee_company ec on pp.profile_id = ec.personal_profile_id
left join company_pages cp on cp.company_id = ec.company_id
where pp.followers < cp.followers
)

select pp.profile_id 
from personal_profiles pp
left join losers l on l.profile_id = pp.profile_id 
where l.namec is NULL
order by pp.profile_id asc
;

/* 9. Assume there are three Spotify tables containing information about the artists, songs, and music charts. 
Write a query to determine the top 5 artists whose songs appear in the Top 10 of the global_song_rank table the highest number of times. 
From now on, we'll refer to this ranking number as "song appearances".

Output the top 5 artist names in ascending order along with their song appearances ranking (not the number of song appearances, 
but the rank of who has the most appearances). The order of the rank should take precedence.

For example, Ed Sheeran's songs appeared 5 times in Top 10 list of the global song rank table; this is the highest number of appearances, so he is ranked 1st. 
Bad Bunny's songs appeared in the list 4, so he comes in at a close 2nd. */

select distinct artist_name, ranking
from (
  select artist_name, song_appearances,
  dense_rank() over (order by song_appearances desc) as ranking
  from (
    SELECT a.artist_id, a.artist_name, rank,
    count(s.song_id) over (PARTITION BY a.artist_name) as song_appearances
    FROM artists a
    left join songs s on s.artist_id = a.artist_id
    left join global_song_rank g on g.song_id = s.song_id
    where g.rank < 11
  ) one
) two
where ranking < 6
order by ranking asc, artist_name asc
;
