/* An assortment of questions by DataLemur of the medium and hard difficulty. 
I'll leave it to you to decide which ones are medium and which ones are hard */

--skills used: window functions, CTEs

/* Source: https://datalemur.com/questions */


-- 1. User's Third Transaction
-- Assume you are given the table below on Uber transactions made by users. Write a query to obtain the third transaction of every user. 
-- Output the user id, spend and transaction date.

WITH table_table AS (
select user_id, spend, transaction_date,
row_number() OVER (partition by user_id order by transaction_date) as third
from transactions
)

select user_id, spend, transaction_date
from table_table
where third = 3
;

-- 2.Your team at Accenture is helping a Fortune 500 client revamp their compensation and benefits program. 
/* The first step in this analysis is to manually review employees who are potentially overpaid or underpaid.

An employee is considered to be potentially overpaid if they earn more than 2 times the average salary for people with the same title. 
Similarly, an employee might be underpaid if they earn less than half of the average for their title. 
We'll refer to employees who are both underpaid and overpaid as compensation outliers for the purposes of this problem.

Write a query that shows the following data for each compensation outlier: 
employee ID, salary, and whether they are potentially overpaid or potentially underpaid (refer to Example Output below). */

with payout as (
SELECT
  employee_id,
  salary,
  title,
  (AVG(salary) OVER (PARTITION BY title)) * 2 AS double_average,
  (AVG(salary) OVER (PARTITION BY title)) / 2 AS half_average
FROM employee_pay
)
SELECT
  employee_id,
  salary,
  CASE WHEN salary > double_average THEN 'Overpaid'
    WHEN salary < half_average THEN 'Underpaid'
  END AS outlier_status
FROM payout
WHERE salary > double_average
  OR salary < half_average;
