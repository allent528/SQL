/* An assortment of questions by DataLemur of the medium and hard difficulty. 
I'll leave it to you to decide which ones are medium and which ones are hard */

--skills used: window functions, CTEs, rolling averages, subqueries

/* Source: https://datalemur.com/questions */


-- 1. User's Third Transaction
-- Assume you are given the table below on Uber transactions made by users. Write a query to obtain the third transaction of every user. 
-- Output the user id, spend and transaction date.

WITH table_table AS (
select user_id, spend, transaction_date,
row_number() OVER (partition by user_id order by transaction_date) as third
from transactions
)

select user_id, spend, transaction_date
from table_table
where third = 3
;

-- 2.Your team at Accenture is helping a Fortune 500 client revamp their compensation and benefits program. 
/* The first step in this analysis is to manually review employees who are potentially overpaid or underpaid.

An employee is considered to be potentially overpaid if they earn more than 2 times the average salary for people with the same title. 
Similarly, an employee might be underpaid if they earn less than half of the average for their title. 
We'll refer to employees who are both underpaid and overpaid as compensation outliers for the purposes of this problem.

Write a query that shows the following data for each compensation outlier: 
employee ID, salary, and whether they are potentially overpaid or potentially underpaid (refer to Example Output below). */

with payout as (
SELECT
  employee_id,
  salary,
  title,
  (AVG(salary) OVER (PARTITION BY title)) * 2 AS double_average,
  (AVG(salary) OVER (PARTITION BY title)) / 2 AS half_average
FROM employee_pay
)
SELECT
  employee_id,
  salary,
  CASE WHEN salary > double_average THEN 'Overpaid'
    WHEN salary < half_average THEN 'Underpaid'
  END AS outlier_status
FROM payout
WHERE salary > double_average
  OR salary < half_average;

/* 3. Assume you are given the tables below containing information on Snapchat users, their ages, and their time spent sending and opening snaps. 
Write a query to obtain a breakdown of the time spent sending vs. opening snaps (as a percentage of total time spent on these activities) for each age group.

Output the age bucket and percentage of sending and opening snaps. Round the percentage to 2 decimal places. */

select age_bucket,
round(send_time*100.0/total,2) as time_send_perc,
round(open_time*100.0/total,2) as time_open_perc
from (
select age_bucket,
sum(CASE WHEN activity_type = 'open' THEN time_spent ELSE 0 END) as open_time,
sum(CASE when activity_type = 'send' THEN time_spent ELSE 0 END) as send_time,
sum(time_spent) as total
from (
select *
from activities a  
join age_breakdown ab on ab.user_id = a.user_id
where activity_type in ('open', 'send')
) one
group by age_bucket
) two
;

/* 4. The table below contains information about tweets over a given period of time. 
Calculate the 3-day rolling average of tweets published by each user for each date that a tweet was posted. 
Output the user id, tweet date, and rolling averages rounded to 2 decimal places. */

select user_id, tweet_date, ROUND(rollingavg,2) as rollingavg3days
from (
SELECT user_id,
tweet_date,
avg(count(distinct tweet_id)) over (partition by user_id order by tweet_date
rows BETWEEN 2 preceding and current row) as rollingavg
FROM tweets
GROUP BY user_id, tweet_date
) one
;
