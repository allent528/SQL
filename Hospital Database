/* Allen T's Hospital Database

 Here I answer several critical questions posed by stakeholders of a hospital. */



-- 1. Show unique birth years from patients and order them by ascending.

SELECT DISTINCT year(birth_date) as birth_year
from patients
order by year(birth_date) asc
;

-- 2. Show unique first names from the patients table which only occurs once in the list. 
-- For example, if two or more people are named 'John' in the first_name column then don't include their name in the output list. 
-- If only 1 person is named 'Leo' then include them in the output.

SELECT first_name FROM (
SELECT first_name, count(*) as one
from patients
group by first_name
  )
where one = 1
;

-- 3. Show patient_id and first_name from patients where their first_name start and ends with 's' and is at least 6 characters long.

select patient_id, first_name
from patients
where first_name like "S%" AND first_name LIKE "%s" AND length(first_name) >= 6
;

-- 4. Show patient_id, first_name, last_name from patients whos diagnosis is 'Dementia'.
--Primary diagnosis is stored in the admissions table.

select p.patient_id, p.first_name, p.last_name
from patients p
JOIN admissions a 
	on p.patient_id = a.patient_id
where a.diagnosis = "Dementia"
;

-- 5. Display every patient's first_name.
-- Order the list by the length of each name and then by alphbetically

select first_name
from patients
order by length(first_name) asc, first_name asc
;

-- 6. Show the total amount of male patients and the total amount of female patients in the patients table.
-- Display the two results in the same row.

select (select count(*) from patients where gender = "M") as male_count, 
(select count(*) from patients where gender = "F") as female_count
from patients
limit 1
;

-- 7. Show first and last name, allergies from patients which have allergies to either 'Penicillin' or 'Morphine'. 
-- Show results ordered ascending by allergies then by first_name then by last_name.

select first_name, last_name, allergies
from patients
where allergies IN ('Penicillin', 'Morphine')
order by allergies, first_name, last_name
;

-- 8. Show patient_id, diagnosis from admissions. Find patients admitted multiple times for the same diagnosis.

select patient_id, diagnosis from (
select patient_id, diagnosis, count(*) as two
from admissions
group by patient_id, diagnosis
  )
where two > 1
;

-- 9. Show the city and the total number of patients in the city.
-- Order from most to least patients and then by city name ascending.

select city, count(patient_id)
from patients
group by city
order by count(patient_id) desc, city asc
;

-- 10. Show first name, last name and role of every person that is either patient or physician.
-- The roles are either "Patient" or "Physician"

select first_name, last_name, "Patient"
from patients
UNION
select first_name, last_name, "Physician"
from physicians
;

-- 11. Show all allergies ordered by popularity. Remove NULL values from query.

select allergies, count(*) as total_diagnosis
from patients
WHERE allergies is not null
group by allergies
order by total_diagnosis desc
;

-- 12. Show all patient's first_name, last_name, and birth_date who were born in the 1970s decade. Sort the list starting from the earliest birth_date.

select first_name, last_name, birth_date
from patients
where year(birth_date) between 1970 and 1979
order by birth_date asc
;

-- 13. We want to display each patient's full name in a single column. Their last_name in all upper letters must appear first, then first_name in all lower case letters. 
-- Separate the last_name and first_name with a comma. Order the list by the first_name in decending order
-- EX: SMITH,jane

select concat(upper(last_name), ",", lower(first_name))
from patients
order by first_name desc
;

-- 14. Show the province_id(s), sum of height; where the total sum of its patient's height is greater than or equal to 7,000.

select province_id, sum(height)
from patients
group by province_id
having sum(height) >= 7000
;

-- 15. Show the difference between the largest weight and smallest weight for patients with the last name 'Maroni'

select max(weight) - min(weight) as weight_delta
from patients
where last_name = "Maroni"
;

-- 16. Show all of the days of the month (1-31) and how many admission_dates occurred on that day. Sort by the day with most admissions to least admissions.

select day(admission_date), count(*)
from admissions
group by day(admission_date)
order by count(*) desc
;

-- 17. Show all columns for patient_id 542's most recent admission_date.

select * 
from admissions
where patient_id = 542
order by admission_date desc
limit 1
;

-- 18. Show patient_id, attending_physician_id, and diagnosis for admissions that match one of the two criteria:
-- 1) patient_id is an odd number and attending_physician_id is either 1, 5, or 19.
-- 2) attending_physician_id contains a 2 and the length of patient_id is 3 characters.

select patient_id, attending_physician_id, diagnosis
from admissions
where (patient_id % 2 = 1 and attending_physician_id IN (1,5,19)) OR 
(attending_physician_id LIKE '%2%' AND length(patient_id) = 3)
;

-- 19. Show first_name, last_name, and the total number of admissions attended for each physician.
-- Every admission has been attended by a physician.

WITH phys_count as (
  select count(*) as physcount, a.attending_physician_id as attending_physician_id
from admissions a
group by a.attending_physician_id
  )
select p.first_name, p.last_name, pc.physcount
from physicians p
INNER JOIN phys_count pc 
on p.physician_id = pc.attending_physician_id
;

-- 20. For each physicain, display their id, full name, and the first and last admission date they attended.

select p.physician_id, concat(p.first_name, " ", p.last_name) as full_name, min(a.admission_date), max(a.admission_date)
from physicians p 
INNER join admissions a 
on p.physician_id = a.attending_physician_id
group by p.physician_id, full_name
;

-- 21. Display the total amount of patients for each province. Order by descending.

select pn.province_name as name, count(p.patient_id) as total
from province_names pn
join patients p
on p.province_id = pn.province_id
group by name
order by total desc
;

-- 22. Show all of the patients grouped into weight groups.
-- Show the total amount of patients in each weight group.
-- Order the list by the weight group decending.
-- For example, if they weight 100 to 109 they are placed in the 100 weight group, 110-119 = 110 weight group, etc.

select count(*) as patients_in_group, truncate(weight,-1) as weight_group
from patients
group by weight_group
order by weight_group desc
;

-- 23. Show patient_id, weight, height, isObese from the patients table.
-- Display isObese as a boolean 0 or 1.
-- Obese is defined as weight(kg)/(height(m)2) >= 30.
-- weight is in units kg.
-- height is in units cm.

select patient_id, weight, height,
CASE
	WHEN weight/(POWER(height/100.0,2)) >= 30 THEN 1
    ELSE 0
END AS "isObese"
from patients
;

-- 24. Show patient_id, first_name, last_name, and attending physician's specialty.
-- Show only the patients who has a diagnosis as 'Epilepsy' and the physician's first name is 'Lisa'
-- Check patients, admissions, and physicians tables for required information.

select p.patient_id, p.first_name, p.last_name, ph.specialty
from patients p 
LEFT JOIN admissions a 
	on p.patient_id = a.patient_id
LEFT JOIN physicians ph 
	on a.attending_physician_id = ph.physician_id
where a.diagnosis = "Epilepsy" AND ph.first_name = "Lisa"
;

/* 25. All patients who have gone through admissions, can see their medical documents on our site. 
Those patients are given a temporary password after their first admission. Show the patient_id and temp_password.
The password must be the following, in order:
1. patient_id
2. the numerical length of patient's last_name
3. year of patient's birth_date */

select DISTINCT p.patient_id,
concat(p.patient_id, length(p.last_name), year(birth_date)) as temp_password
from patients p 
LEFT JOIN admissions a     
	ON p.patient_id = a.patient_id
where admission_date is not null
;

-- 26. Each admission costs $50 for patients without insurance, and $10 for patients with insurance. All patients with an even patient_id have insurance.
-- Give each patient a 'Yes' if they have insurance, and a 'No' if they don't have insurance. Add up the admission_total cost for each has_insurance group.

select
CASE
	WHEN patient_id % 2 = 0 THEN 'Yes'
    ELSE 'No'
END AS "has_insurance",
SUM(CASE
	WHEN patient_id % 2 = 0 THEN 10
    Else 50
END) as "cost_after_insurance"
from admissions
group by has_insurance
order by cost_after_insurance desc
;

-- 27. Show the provinces that has more patients identified as 'M' than 'F'. Must only show full province_name

select province_name
from province_names pn
INNER join patients p
on p.province_id = pn.province_id
group by province_name
having 
	count(case WHEN gender = 'M' THEN 1 END) > count(case when gender = 'F' THEN 1 END)
;

/* 28. We are looking for a specific patient. Pull all columns for the patient who matches the following criteria:
- First_name contains an 'r' after the first two letters.
- Identifies their gender as 'F'
- Born in February, May, or December
- Their weight would be between 60kg and 80kg
- Their patient_id is an odd number
- They are from the city 'Kingston' */

select *
from patients
where substring(first_name,3,1) = "r" AND gender = 'F' AND month(birth_date) IN (2,5,12) AND 
weight between 60 and 80 AND patient_id % 2 = 1 AND city = 'Kingston'
;

-- 29. Show the percent of patients that have 'M' as their gender. Round the answer to the nearest hundreth number and in percent form.

select concat(round((sum(case when gender = 'M' THEN 1.00 END)/ sum(case when gender = 'F'or gender = 'M' THEN 1.00 END))*100,2),'%')
from patients
;

-- 30. For each day display the total amount of admissions on that day. Display the amount changed from the previous date.

select admission_date, admission_day, admission_day - admission_count as admission_count_change from (
select admission_date, count(*) as admission_day,
lag(count(*),1) OVER (order by admission_date asc ) admission_count
from admissions
group by 1
  )
;
